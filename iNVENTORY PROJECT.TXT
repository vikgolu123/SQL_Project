 CREATE DATABASE INVENTORYPROJECT;

USE INVENTORYPROJECT;
  

CREATE TABLE SUPPLIER 
(SID CHAR(5) PRIMARY KEY,
SNAME VARCHAR(50),
SADD  VARCHAR(50),
SCITY VARCHAR(50),
SPHONE CHAR(15),
EMAIL  VARCHAR(50)
);


CREATE TABLE PRODUCT
(PID CHAR(5) PRIMARY KEY,
PDESC VARCHAR(30),
PRICE INT,
CATEGORY CHAR(2),
SID CHAR(5)
);

ALTER TABLE PRODUCT
ADD CONSTRAINT FKSID FOREIGN KEY (SID) REFERENCES SUPPLIER (SID);

CREATE TABLE STOCK 
(PID CHAR(5) REFERENCES PRODUCT (PID),
SQTY INT,
ROL INT,
MOQ INT);

CREATE TABLE CUSTOMER
(CID CHAR(5) PRIMARY KEY, 
CNAME VARCHAR(20),
ADDR VARCHAR(50),
CITY VARCHAR(50),
PHONE CHAR(15),
EMAIL VARCHAR(50),
DOB DATE);


CREATE TABLE ORDERS 
(OID CHAR(5) PRIMARY KEY,
ODATE DATE,
CID CHAR(5) REFERENCES CUSTOMER (CID),
PID CHAR(5) REFERENCES PRODUCT (PID),
OQTY INT);
	

CREATE SEQUENCE S1 
AS INT
START WITH 1 
INCREMENT BY 1;

CREATE FUNCTION CID (@C AS CHAR(1), @I AS INT)
RETURNS CHAR(5)
AS
BEGIN
	DECLARE @ID AS CHAR(5);
	IF @I < 10 
		SET @ID = CONCAT (@C, '000', @I)
	ELSE IF @I < 100
		SET @ID = CONCAT (@C, '00', @I)
	ELSE IF @I < 1000 
		SET @ID = CONCAT (@C, '0', @I)
	ELSE IF @I < 10000
		SET @ID = CONCAT (@C, @I)
	ELSE
		SET @ID = 'NA';
	RETURN @ID;

END;

SELECT DBO.CID('O', 2547);


CREATE PROCEDURE INSUP @N AS VARCHAR(30), @A AS VARCHAR(30), @C AS VARCHAR(30), @P AS CHAR(15), @EM AS VARCHAR(50)
AS
BEGIN 
	
	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;
	
	SET @I = (NEXT VALUE FOR S1);
	SET @ID = DBO.CID('S', @I);

	INSERT INTO SUPPLIER
	VALUES(@ID, @N, @A, @C, @P, @EM);

	SELECT * FROM SUPPLIER
	WHERE SID = @ID;

END;

-- PROCEDURE TO ADD A PRODUCT TO PRODUCT TABLE

CREATE SEQUENCE S2 
AS INT
START WITH 4
INCREMENT BY 1;


SELECT * FROM PRODUCT;

CREATE PROCEDURE INPRO @PD AS VARCHAR(100), @P AS INT, @C AS CHAR(2), @SI AS CHAR(5)
AS
BEGIN 
	
	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;
	
	SET @I = (NEXT VALUE FOR S2);
	SET @ID = DBO.CID('P', @I);

	INSERT INTO PRODUCT
	VALUES(@ID, @PD, @P, @C, @SI);

	SELECT * FROM PRODUCT 
	WHERE PID = @ID;

END;


-- PROCEDURE TO ADD A STOCK 

SELECT * FROM STOCK;
SELECT * FROM PRODUCT;

CREATE PROCEDURE INSTK @PI AS CHAR(5), @SQ AS INT, @RL AS INT, @MQ AS INT
AS
BEGIN 
	
	INSERT INTO STOCK
	VALUES(@PI, @SQ, @RL, @MQ);

	SELECT PRODUCT.PID, PDESC, PRICE, CATEGORY, SQTY, ROL, MOQ 
	FROM STOCK 
	INNER JOIN PRODUCT
	ON STOCK.PID= PRODUCT.PID 
	WHERE STOCK.PID = @PI;

END;


-- PROCEDURE TO ADD THE CUSTOMER DETAILS

CREATE SEQUENCE S3 
AS INT
START WITH 3
INCREMENT BY 1;


SELECT * FROM CUSTOMER;

CREATE PROCEDURE INCUST @CN AS VARCHAR(50), @CA AS VARCHAR(50), @C AS VARCHAR(50), @PH AS CHAR(15), @EM AS VARCHAR(50), @DB AS DATE
AS
BEGIN 
	
	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;
	
	SET @I = (NEXT VALUE FOR S3);
	SET @ID = DBO.CID('C', @I);

	INSERT INTO CUSTOMER
	VALUES(@ID, @CN, @CA, @C, @PH, @EM, @DB);

	SELECT * FROM CUSTOMER 
	WHERE CID = @ID;

END;


INSUP 'ANMOL ENTERPRISES', 'B605 PHASE 2 LAXMI NAGAR', 'DELHI', '9811547880', 'ANMOL@GMAIL.COM';
INSUP 'PVR OVERSEAS', 'SECTOR 1 DWARKA', 'DELHI', '9855747474', 'PVR@OUTLOOK.COM';

INSERT INTO PRODUCT 
VALUES('P0001', 'DELL MOUSE', 350, 'IT', 'S0001');

INSERT INTO PRODUCT 
VALUES('P0002', 'DELL KEYBOARD', 750, 'IT', 'S0001');


INSERT INTO PRODUCT 
VALUES('P0003', 'MICROTECH 600VS UPS', 2450, 'IT', 'S0001');

SELECT * FROM PRODUCT;

INSERT INTO STOCK
VALUES('P0001', 100, 10, 50);

INSERT INTO STOCK
VALUES('P0002', 50,5, 20);

SELECT * FROM STOCK;

INSERT INTO CUSTOMER
VALUES('C0001', 'RAVINDER KUMAR', 'SECTOR 13 DWARKA', 'DELHI', '9822157301', 'RK01@GMAIL.COM', '01-JAN-1998');
INSERT INTO CUSTOMER
VALUES('C0002', 'RAVI KUMAR', 'C2 JANAKPURI', 'DELHI', '9999551147', 'RAVI@GMAIL.COM', '01-DEC-1998');

SELECT * FROM CUSTOMER;

SELECT * FROM PRODUCT;
SELECT * FROM STOCK;

CREATE SEQUENCE S4 
AS INT
START WITH 1
INCREMENT BY 1;

SELECT * FROM ORDERS; 


CREATE PROCEDURE INORD @CI AS CHAR(5), @PI AS CHAR(5), @QT AS INT
AS
BEGIN
	DECLARE @I AS INT;
	DECLARE  @ID AS CHAR (5);

	SET @I = (NEXT VALUE FOR S4);
	SET @ID = DBO.CID('O', @I);

	INSERT INTO ORDERS
	VALUES(@ID, GETDATE(), @CI, @PI, @QT);

	SELECT * FROM ORDERS;
	SELECT * FROM STOCK WHERE PID = @PI;
END;

DROP TRIGGER TR_IN_ORD;

CREATE TRIGGER TR_IN_ORD
ON ORDERS 
FOR INSERT
AS
BEGIN
	--SET NOCOUNT ON;
	DECLARE @QR AS INT;
	DECLARE @QS AS INT;

	SET @QR = (SELECT OQTY FROM INSERTED);
	SET @QS = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));

	IF @QS >= @QR	
		BEGIN
			UPDATE STOCK SET SQTY = SQTY - (SELECT OQTY FROM INSERTED)
			WHERE PID = (SELECT PID FROM INSERTED);
			COMMIT;
			PRINT ('ORDER ACCEPTED');
		END;
	ELSE
		BEGIN
			ROLLBACK;
			PRINT('INSUFFICIENT QUANTITY ORDER REJECTED');
		END;

END;

--- INSERT TRIGGER ON ORDERS FOR AUTOMATING THE PURCHASE

CREATE TRIGGER TR_IN_ORD
ON ORDERS 
FOR INSERT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @QR AS INT;
	DECLARE @QS AS INT;
	DECLARE @RL AS INT;
	DECLARE @MQ AS INT;
	DECLARE @PI AS CHAR(5);
	DECLARE @SI AS CHAR(5);

	SET @PI = (SELECT PID FROM INSERTED);
	SET @SI = (SELECT SID FROM PRODUCT WHERE PID = @PI);
	SET @QR = (SELECT OQTY FROM INSERTED);
	SET @QS = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));

	IF @QS >= @QR	
		BEGIN
			UPDATE STOCK SET SQTY = SQTY - (SELECT OQTY FROM INSERTED)
			WHERE PID = (SELECT PID FROM INSERTED);
				
			SET @QS = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
			SET @RL = (SELECT ROL FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
			SET @MQ = (SELECT MOQ FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
			IF @QS <= @RL 
				BEGIN
				
					INSERT INTO PURCHASE 
					VALUES ( @PI, @SI, @MQ, GETDATE());

					SELECT * FROM PURCHASE;
				END;
			SELECT * FROM STOCK WHERE PID = @PI;
			SELECT * FROM ORDERS WHERE OID = (SELECT OID FROM INSERTED);			
			COMMIT;
			PRINT ('ORDER ACCEPTED');
		END;
	ELSE
		BEGIN
			ROLLBACK;
			PRINT('INSUFFICIENT QUANTITY ORDER REJECTED');
		END;

END;









INORD 'C0001','P0001', 10;
INORD 'C0002','P0002', 10;
INORD 'C0001','P0002', 20;
INORD 'C0002','P0002', 40;
INORD 'C0001','P0001', 80;
INORD 'C0002','P0001', 10;
INORD 'C0003','P0001', 5;

SELECT * FROM ORDERS;
	SELECT * FROM STOCK;


	SELECT * FROM PRODUCT;
	SELECT * FROM CUSTOMER;
	SELECT * FROM ORDERS;
	SELECT * FROM PURCHASE;

CREATE PROCEDURE BILL @OI AS CHAR(5)
AS
BEGIN
	SELECT CUSTOMER.CID, CNAME, OID, ODATE , PRODUCT.PID, PDESC, PRICE, OQTY , PRICE * OQTY AS 'AMOUNT'
	FROM ORDERS
	INNER JOIN CUSTOMER
	ON ORDERS.CID = CUSTOMER.CID
	INNER JOIN PRODUCT
	ON ORDERS.PID = PRODUCT.PID
	WHERE OID = @OI;
END;
	

BILL 'O0002';

-----

SELECT * FROM SUPPLIER;
SELECT * FROM PRODUCT;
SELECT * FROM STOCK;
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM STOCK;
SELECT * FROM PURCHASE;
INSUP 'GRAND BRANDS INDIA', '128/2 LAXMI NAGAR', 'DELHI' ,'9855013479', 'GBI@GMAIL.COM';
INPRO 'SAMSUNG 22" LED MONITOR' , 6500, 'IT', 'S0003' ;
INSTK 'P0003', 20, 5, 10;
INSTK 'P0004', 10, 5, 5;

INCUST 'ABHISHEK KUMAR', 'DLF PHASE2', 'GURGAON', '9855100017', 'AK@GMAIL.COM', '13-MAR-1999';

INORD 'C0003', 'P0003', 5;
INORD 'C0003', 'P0004', 6;
INORD 'C0002', 'P0001', 3;
INORD 'C0002', 'P0003', 12;
INORD 'C0001', 'P0004', 3;
INORD 'C0001', 'P0003', 2;

CREATE TABLE PURCHASE
(PID CHAR(5),
SID CHAR(5),
PQTY INT,
DOP DATE);

BILL 'O0016';

SELECT * FROM PRODUCT;
SELECT * FROM ORDERS;

CREATE PROCEDURE DPR
AS
BEGIN
	SELECT OID, ODATE, PRODUCT.PID, PDESC, PRICE, CATEGORY, CUSTOMER.CID, CNAME, CITY
	FROM ORDERS
	INNER JOIN PRODUCT
	ON ORDERS.PID=PRODUCT.PID
	INNER JOIN CUSTOMER
	ON ORDERS.CID=CUSTOMER.CID
	WHERE DAY(ODATE)=DAY(GETDATE()) AND MONTH(ODATE)=MONTH(GETDATE()) AND YEAR(ODATE)=YEAR(GETDATE()) ;
END;

SELECT GETDATE();

DPR;


CREATE PROCEDURE CUSTL @CI AS CHAR(5)
AS
BEGIN
	SELECT CUSTOMER.CID, CNAME, CITY, PHONE, OID, ODATE, PDESC,CATEGORY,  OQTY, PRICE, OQTY* PRICE AS 'BILL AMOUNT'
	FROM CUSTOMER
	INNER JOIN ORDERS
	ON CUSTOMER.CID = ORDERS.CID
	INNER JOIN PRODUCT
	ON PRODUCT.PID = ORDERS.PID 
	WHERE CUSTOMER.CID = @CI;

	SELECT SUM(PRODUCT.PRICE*OQTY) AS 'TOTAL BUSINESS GIVEN'
	FROM ORDERS
	INNER JOIN PRODUCT
	ON ORDERS.PID= PRODUCT.PID
	WHERE CID= @CI
	GROUP BY CID;
	
	
END;


SELECT * FROM CUSTOMER;
SELECT * FROM PRODUCT;
SELECT * FROM ORDERS;

CUSTL 'C0003';

SELECT * FROM PRODUCT;
SELECT * FROM SUPPLIER;

CREATE PROCEDURE SR @SI AS CHAR(5)
AS
BEGIN
	SELECT SUPPLIER.SID, SNAME, SCITY, PID, PDESC, CATEGORY, PRICE 	
	FROM SUPPLIER
	INNER JOIN PRODUCT
	ON SUPPLIER.SID = PRODUCT.SID
	WHERE SUPPLIER.SID = @SI;
END;

SR 'S0003';
